import * as React from "react";
import styled from "styled-components";
import { SvgWrapper } from "./style";

interface SvgWrapperProps {
  size?: number;
  margin?: string;
  glyph: string;
  children: React.ReactNode;
}

export const InlineSvg = styled.svg`
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  height: 100%;
  width: 100%;
  color: inherit;
  fill: currentColor;
`;

type GlyphProps = {
  glyph: string;
};

export const Glyph = ({ glyph }: GlyphProps): any => {
  switch (glyph) {
    case "Twitter":
      return (
        <path
          d="M 9 0 C 13.971 0 18 4.029 18 9 C 18 13.971 13.971 18 9 18 C 4.029 18 0 13.971 0 9 C 0 4.029 4.029 0 9 0 Z M 13.583 5.25 C 13.184 5.531 12.743 5.747 12.275 5.888 C 11.761 5.296 10.933 5.089 10.201 5.369 C 9.469 5.648 8.99 6.354 9 7.138 L 9 7.554 C 7.513 7.593 6.105 6.884 5.25 5.667 C 5.25 5.667 3.583 9.417 7.333 11.083 C 6.475 11.666 5.453 11.958 4.417 11.917 C 8.167 14 12.75 11.917 12.75 7.125 C 12.75 7.009 12.738 6.893 12.717 6.779 C 13.142 6.36 13.442 5.83 13.583 5.25 Z"
          fill="hsl(196, 100%, 49%)"
        ></path>
      );
    case "Linkedin":
      return (
        <path
          d="M 9 0 C 13.971 0 18 4.029 18 9 C 18 13.971 13.971 18 9 18 C 4.029 18 0 13.971 0 9 C 0 4.029 4.029 0 9 0 Z M 6.705 7.543 L 5.038 7.543 C 4.923 7.543 4.83 7.636 4.83 7.751 L 4.83 13.168 C 4.83 13.283 4.923 13.376 5.038 13.376 L 6.705 13.376 C 6.82 13.376 6.913 13.283 6.913 13.168 L 6.913 7.751 C 6.913 7.636 6.82 7.543 6.705 7.543 Z M 5.863 6.708 C 6.434 6.708 6.897 6.242 6.897 5.667 C 6.897 5.092 6.434 4.625 5.863 4.625 C 5.293 4.625 4.83 5.092 4.83 5.667 C 4.83 6.242 5.293 6.708 5.863 6.708 Z M 11.708 13.375 L 12.958 13.375 C 13.073 13.375 13.167 13.282 13.167 13.167 L 13.167 9.667 C 13.167 8.096 12.279 7.333 11.038 7.333 C 10.542 7.315 10.062 7.507 9.717 7.863 C 9.67 7.917 9.594 7.936 9.528 7.911 C 9.461 7.886 9.416 7.821 9.417 7.75 C 9.417 7.635 9.323 7.542 9.208 7.542 L 7.958 7.542 C 7.843 7.542 7.75 7.635 7.75 7.75 L 7.75 13.167 C 7.75 13.282 7.843 13.375 7.958 13.375 L 9.208 13.375 C 9.323 13.375 9.417 13.282 9.417 13.167 L 9.417 10.042 C 9.417 9.466 9.883 9 10.458 9 C 11.034 9 11.5 9.466 11.5 10.042 L 11.5 13.167 C 11.5 13.282 11.593 13.375 11.708 13.375 Z"
          fill="hsl(201, 100%, 46%)"
        ></path>
      );
    case "Email":
      return (
        <g>
          <path d="M 4 14 L 14 14 L 14 4 L 4 4 Z" fill="transparent"></path>
          <path
            d="M 9 0 C 13.971 0 18 4.029 18 9 C 18 13.971 13.971 18 9 18 C 4.029 18 0 13.971 0 9 C 0 4.029 4.029 0 9 0 Z M 8.328 9.406 C 8.738 9.666 9.261 9.666 9.671 9.406 L 13.21 7.155 C 13.512 6.962 13.651 6.592 13.551 6.248 C 13.45 5.904 13.135 5.667 12.776 5.667 L 5.224 5.667 C 4.865 5.665 4.547 5.902 4.447 6.247 C 4.346 6.592 4.486 6.962 4.79 7.155 Z M 10.118 10.109 C 9.436 10.544 8.563 10.544 7.881 10.109 L 4.736 8.108 C 4.598 8.02 4.416 8.119 4.416 8.284 L 4.416 11.084 C 4.416 11.774 4.976 12.334 5.666 12.334 L 12.333 12.334 C 13.023 12.334 13.583 11.774 13.583 11.084 L 13.583 8.284 C 13.583 8.208 13.542 8.138 13.475 8.101 C 13.408 8.065 13.327 8.068 13.263 8.108 L 10.118 10.11 Z"
            fill="hsl(262, 70%, 63%)"
          ></path>
        </g>
      );

    case "Dribbble":
      return (
        <path
          d="M 9 0 C 13.971 0 18 4.029 18 9 C 18 13.971 13.971 18 9 18 C 4.029 18 0 13.971 0 9 C 0 4.029 4.029 0 9 0 Z M 9 4 C 6.238 4 4 6.239 4 9 C 4 11.761 6.238 14 9 14 C 11.762 14 14 11.761 14 9 C 14 6.239 11.762 4 9 4 Z M 13.119 8.767 C 12.046 8.591 11.059 8.582 10.159 8.737 C 10.058 8.501 9.951 8.268 9.84 8.037 C 10.802 7.62 11.575 7.054 12.151 6.336 C 12.73 7.019 13.07 7.873 13.119 8.767 Z M 11.518 5.733 C 11.016 6.38 10.323 6.892 9.44 7.266 C 9.009 6.478 8.524 5.721 7.987 5 C 8.318 4.915 8.658 4.871 9 4.87 C 9.948 4.87 10.82 5.194 11.518 5.733 Z M 7.136 5.319 C 7.681 6.03 8.173 6.779 8.61 7.561 C 7.598 7.859 6.389 8.012 4.992 8.022 C 5.279 6.852 6.062 5.865 7.136 5.319 Z M 4.87 9 L 4.875 8.893 C 6.479 8.891 7.862 8.707 9.021 8.343 C 9.118 8.54 9.211 8.739 9.3 8.939 C 7.892 9.38 6.731 10.282 5.826 11.639 C 5.207 10.899 4.869 9.965 4.87 9 Z M 6.465 12.254 C 7.285 10.967 8.333 10.13 9.631 9.743 C 10.017 10.748 10.302 11.79 10.482 12.851 C 9.087 13.389 7.585 13.129 6.465 12.254 Z M 11.292 12.433 C 11.11 11.454 10.842 10.492 10.492 9.56 C 11.274 9.449 12.134 9.478 13.075 9.641 C 12.896 10.78 12.25 11.792 11.292 12.433 Z"
          fill="hsl(339, 73%, 67%)"
        ></path>
      );

    case "ChevronDown":
      return (
        <path
          d="M 5 7.5 L 9 11.5 L 13 7.5"
          fill="transparent"
          strokeWidth="1.5"
          stroke="currentColor"
          strokeLinecap="round"
          strokeMiterlimit="10"
        ></path>
      );

    default:
      return null;
  }
};

interface Props {
  size: number;
  margin: string;
  glyph: string;
}

export default function Icon({ size, margin, glyph }: Props) {
  return (
    <SvgWrapper svgWrappersvgWrapperSize={size} svgWrapperMargin={margin}>
      <InlineSvg
        fillRule="evenodd"
        clipRule="evenodd"
        strokeLinejoin="round"
        strokeMiterlimit="1.414"
        xmlns="http://www.w3.org/2000/svg"
        aria-label={glyph}
        viewBox="0 0 18 18"
        preserveAspectRatio="xMidYMid meet"
      >
        <title>{glyph}</title>
        <Glyph glyph={glyph} />
      </InlineSvg>
    </SvgWrapper>
  );
}
